@use "sass:map";
@use "sass:math";

$default-grid-size: 12;
$grid-breakpoints: (
		"xs": 0,
		"sm": 576px,
		"md": 768px,
		"lg": 992px,
		"xl": 1200px,
		"xxl": 1400px
);
$display-breakpoints: (
		'xs-only': 		"only screen and (max-width: #{map.get($grid-breakpoints, 'sm') - 1px})",
		'sm-only': 		"only screen and (min-width: #{map.get($grid-breakpoints, 'sm')}) and (max-width: #{map.get($grid-breakpoints, 'md') - 1px})",
		'sm-and-down': 	"only screen and (max-width: #{map.get($grid-breakpoints, 'md') - 1px})",
		'sm-and-up': 	"only screen and (min-width: #{map.get($grid-breakpoints, 'sm')})",
		'md-only': 		"only screen and (min-width: #{map.get($grid-breakpoints, 'md')}) and (max-width: #{map.get($grid-breakpoints, 'lg') - 1px})",
		'md-and-down': 	"only screen and (max-width: #{map.get($grid-breakpoints, 'lg') - 1px})",
		'md-and-up': 	"only screen and (min-width: #{map.get($grid-breakpoints, 'md')})",
		'lg-only': 		"only screen and (min-width: #{map.get($grid-breakpoints, 'lg')}) and (max-width: #{map.get($grid-breakpoints, 'xl') - 1px})",
		'lg-and-down': 	"only screen and (max-width: #{map.get($grid-breakpoints, 'xl') - 1px})",
		'lg-and-up': 	"only screen and (min-width: #{map.get($grid-breakpoints, 'lg')})",
		'xl-only': 		"only screen and (min-width: #{map.get($grid-breakpoints, 'xl')}) and (max-width: #{map.get($grid-breakpoints, 'xxl') - 1px})",
		'xl-and-down': 	"only screen and (max-width: #{map.get($grid-breakpoints, 'xxl') - 1px})",
		'xl-and-up': 	"only screen and (min-width: #{map.get($grid-breakpoints, 'xl')})",
		'xxl-only': 	"only screen and (min-width: #{map.get($grid-breakpoints, 'xxl')})",
);

// .d-#{display}
@mixin set-display-class($breakpoint){
	$displays: none, flex, inline-flex;
	@each $display in $displays {
		.d#{$breakpoint}-#{$display} {
			display: $display !important;
		}
	}
}

// flex utility classes like vuetify
@mixin set-flex-class($breakpoint) {
	$flex: (
		justify: (center, end, inherit, initial, left, normal, revert, right, space-around, space-between, space-evenly, start, stretch, unset),
		align-content: (baseline, center, end, inherit, initial, normal, revert, space-around, space-between, space-evenly, start, stretch, unset),
		justify-items: (baseline, center, end, inherit, initial, left, normal, revert, right, self-end, self-start, start, stretch, unset),
		align: (baseline, center, end, inherit, initial, normal, revert, start, stretch, unset),
		justify-self: (auto, baseline, center, end, inherit, initial, left, normal, revert, right, self-end, self-start, start, stretch, unset),
		align-self: (auto, baseline, center, end, inherit, initial, normal, revert, self-end, self-start, start, stretch, unset),
	);

	@each $flex-item, $flex-values in $flex {
		@each $flex-value in $flex-values{
			$value: $flex-value;
			$item: $flex-item;
			@if ($value == start) { $value: flex-start; }
			@if ($value == end) { $value: flex-end; }
			@if ($item == justify) { $item: justify-content; }
			@if ($item == align) { $item: align-items; }

			.#{$flex-item}#{$breakpoint}-#{$flex-value} { #{$item}: $value !important; }
		}
	}

	$flex-directions: row, column, row-reverse, column-reverse;
	@each $flex-direction in $flex-directions {
		.flex#{$breakpoint}-#{$flex-direction} { flex-direction: $flex-direction !important; }
	}

	$flex-wraps: nowrap, wrap, wrap-reverse;
	@each $flex-wrap in $flex-wraps {
		.flex#{$breakpoint}-#{$flex-wrap} { flex-wrap: $flex-wrap !important; }
	}

	.flex#{$breakpoint}-grow-0{ flex-grow: 0 !important; }
	.flex#{$breakpoint}-grow-1{ flex-grow: 1 !important; }
	.flex#{$breakpoint}-shrink-0{ flex-shrink: 0 !important; }
	.flex#{$breakpoint}-shrink-1{ flex-shrink: 1 !important; }
}

// .col-#{breakpoint}-#{value},
// .col-offset-#{breakpoint}-#{value}
// .col-order-#{breakpoint}-#{value}
// .row-#{value}
// .row-offset-#{value}
// .row-order-#{value}
@mixin set-grid-class($breakpoint) {
	.col#{$breakpoint}-0{
		width: 0;
	}
	@for $i from 1 through $default-grid-size {
		.col#{$breakpoint}-#{$i} {
			width: 100% * math.div($i, $default-grid-size);
		}
		.col-offset#{$breakpoint}-#{$i} {
			margin-inline-start: 100% * math.div($i, $default-grid-size);
		}
		.col-order#{$breakpoint}-#{$i} {
			order: $i;
		}
	}
	.col#{$breakpoint}-auto {
		width: auto;
	}
	.col#{$breakpoint}-unset {
		width: unset;
	}
}


$breakpoints: (
	null: null,
	-sm: sm-and-up,
	-md: md-and-up,
	-lg: lg-and-up,
	-xl: xl-only,
);
@each $breakpoint, $display in $breakpoints {
	@if ($breakpoint == null) {
		@include set-display-class($breakpoint);
		@include set-flex-class($breakpoint);
		@include set-grid-class($breakpoint);
	} @else {
		@media #{map.get($display-breakpoints, $display)} {
			@include set-display-class($breakpoint);
			@include set-flex-class($breakpoint);
			@include set-grid-class($breakpoint);
		}
	}
}